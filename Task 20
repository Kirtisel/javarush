package com.javarush.task.task20.task2027;

import java.lang.reflect.Array;
import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/* 
Кроссворд
*/

public class Solution {
    public static void main(String[] args) {
        int[][] crossword = new int[][]{
                {'f', 'd', 'e', 'r', 'l', 'k'},
                {'u', 's', 'a', 'm', 'e', 'o'},
                {'l', 'n', 'g', 'r', 'o', 'v'},
                {'m', 'l', 'p', 'r', 'r', 'h'},
                {'p', 'o', 'e', 'e', 'j', 'j'}
        };
        detectAllWords(crossword, "home", "same");
        /*
Ожидаемый результат
home - (5, 3) - (2, 0)
same - (1, 1) - (4, 1)
         */
    }

    public static List<Word> detectAllWords(int[][] crossword, String... words) {
     //   System.out.println((char)crossword[4][4]);

        ArrayList<Word> wordArrayList = new ArrayList<Word>();
//checkDirection(crossword, 1, 1, "same", 0, 1);

        for (int n = 0; n < words.length; n++) {


            for (int i = 0; i < crossword.length; i++) {
                for (int j = 0; j < crossword[0].length; j++) {
                   wordArrayList.addAll(checkDirection(crossword, i, j, words[n], 0, 1));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], -1, 1));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], -1, 0));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], -1, -1));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], 0, -1));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], 1, -1));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], 1, 0));
                    wordArrayList.addAll(checkDirection(crossword, i, j, words[n], 1, 1));
                }
            }
        }

        for (Word w : wordArrayList)
            System.out.println(w.toString());

        return wordArrayList;
    }

    public static class Word {
        private String text;
        private int startX;
        private int startY;
        private int endX;
        private int endY;

        public Word(String text) {
            this.text = text;
        }

        public void setStartPoint(int i, int j) {
            startX = i;
            startY = j;
        }

        public void setEndPoint(int i, int j) {
            endX = i;
            endY = j;
        }

        @Override
        public String toString() {
            return String.format("%s - (%d, %d) - (%d, %d)", text, startX, startY, endX, endY);
        }
    }

    public static List<Word> checkDirection (int[][] crossword, int x, int y, String word, int dx, int dy){
        ArrayList wordsList = new ArrayList<Word>();
        int count = 0;
        int charInd = 0;
        int startPointX = x;
        int startPointY = y;
        try {

            while (charInd < word.length()){ //направо
                x = startPointX + dx*charInd;
                y = startPointY + dy*charInd;
                if (crossword[x][y] == word.charAt(charInd))
                    count++;
                else
                    break;

                charInd++;
            }

        }catch (IndexOutOfBoundsException e) {}

            if (count == word.length()) {
                Word myWord = new Word(word);
                myWord.setStartPoint(startPointY, startPointX);
                myWord.setEndPoint(y, x);
                wordsList.add(myWord);

            }

        return wordsList;
    }
}
